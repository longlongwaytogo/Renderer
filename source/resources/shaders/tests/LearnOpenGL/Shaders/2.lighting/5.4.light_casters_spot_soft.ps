#version 330 core
out vec4 FragColor;

in vec3 vFragPos;
in vec3 vNormal;
in vec2 vTexCoords;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 viewPos;

// uniform  块数据
struct Material {
	sampler2D diffuse; // 漫反射贴图 
	//vec3	specular; // 镜面光照对物体的颜色影响
	sampler2D specular;
	float	shininess; // 镜面高光
};

struct Light {
    vec3 position; 
	vec3 direction;
	float cutOff;
	float outerCutOff;
 
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	// 点光源衰减
	float constant;
    float linear;
    float quadratic;

};
uniform Light light;

uniform Material material;

void main()
{

	vec3 lightDir = normalize(light.position - vFragPos);

 
	vec3 diffuseMapColor = texture(material.diffuse,vTexCoords).rgb;
	// 你可以看到，我们并没有给切光角设置一个角度值，反而是用角度值计算了一个余弦值，将余弦结果传递到片段着色器中。
	// 这样做的原因是在片段着色器中，我们会计算LightDir和SpotDir向量的点积，这个点积返回的将是一个余弦值而不是角度值，
	// 所以我们不能直接使用角度值和余弦值进行比较。为了获取角度值我们需要计算点积结果的反余弦，这是一个开销很大的计算。
	// 所以为了节约一点性能开销，我们将会计算切光角对应的余弦值，并将它的结果传入片段着色器中。由于这两个角度现在都由余弦角来表示了，
	// 我们可以直接对它们进行比较而不用进行任何开销高昂的计算。
	// 接下来就是计算θθ值，并将它和切光角ϕϕ对比，来决定是否在聚光的内部：


		// ambient
	
		vec3 ambient = light.ambient * diffuseMapColor;
		
		// diffuse
		vec3 norm = normalize(vNormal);

		float diff = max(dot(norm,lightDir),0.0f); // 反射强度
		vec3 diffuse = light.diffuse * diff * diffuseMapColor;

		// specular
		vec3 viewDir = normalize(viewPos - vFragPos);
		vec3 reflectDir = reflect(-lightDir,norm); // lightDir 取负，表示入射光线

		

		float spec = pow(max(dot(viewDir,reflectDir),0.0), material.shininess);
		//vec3 specular = spec * material.specular * light.specular; // 高光，计算时使用光的颜色
		vec3 specular = spec * vec3(texture(material.specular,vTexCoords)) * light.specular;

		// spotlight(soft edges)
		float theta = dot(lightDir, normalize(-light.direction)); 
		float epsilon = (light.cutOff - light.outerCutOff);
		float intensity = clamp((theta - light.outerCutOff) / epsilon,0.0, 1.0);
		diffuse *= intensity;
		specular *= intensity;

		float distance = length(light.position - vFragPos);
		float attenuation = 1.0 /(light.constant + light.linear * distance + light.quadratic * (distance * distance));
		//ambient  *= attenuation; 
		//diffuse  *= attenuation;
		//specular *= attenuation;

		vec3 result =  (ambient + diffuse + specular) * attenuation;
		FragColor = vec4(result,1.0f);
	
}