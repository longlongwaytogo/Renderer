//7.bloom.ps 场景光照计算
#version 330 core

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;

in VS_OUT {
    vec3 FragPos;  // 世界坐标系下的顶点信息
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

struct Light {
    vec3 Position;
    vec3 Color;
};

uniform Light lights[4]; // 灯光参数
uniform sampler2D diffuseTexture; // 场景材质
//uniform viewPos;
void main()
{
	// 计算diffuse

	vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;

	vec3 normal = normalize(fs_in.Normal);
  	 // ambient
    	vec3 ambient = 0.0 * color;
	vec3 lighting = vec3(0.0); // 总光源
	//vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	for (int i = 0; i < 4; i++)
	{
		// diffuse
		vec3 lightDir = normalize(lights[i].Position - fs_in.FragPos);
		float diff = max(dot(lightDir, normal), 0.0);
		vec3 result = lights[i].Color * diff * color;
 		// attenuation (use quadratic as we have gamma correction)
	 	// float distance = length(lightDir); // error lightDir  已经被归一化了，所以值是错误的
		float distance = length(fs_in.FragPos - lights[i].Position);
		result *= 1.0 / (distance * distance);
		lighting += result; // 累加所有灯光的效果
	}

	// 分离高亮物体
	vec3 result = ambient + lighting;
	
	float brightness = dot(result, vec3(0.2126, 0.7152, 0.0722)); // 点乘，相当于计算各个所有灯光的总量，如果有大于1的，则认为过亮
	if (brightness > 1.0)
		BrightColor = vec4(result,1.0);
		FragColor = vec4(result, 1.0);

}
