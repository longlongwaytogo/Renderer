//1.2.lighting_textured.ps
#version 330 core

out vec4 FragColor;

in VS_OUT{
	vec3 FragPos;
vec3 Normal;
vec2 TexCoords;
} ps_in;

// material parameters
uniform sampler2D albedoMap;	// 反照率
uniform sampler2D normalMap;   // 发现贴图
uniform sampler2D metallicMap;  // 金属度
uniform sampler2D roughnessMap; // 粗糙度
uniform sampler2D aoMap;		// 环境遮蔽

// lights 
uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];

uniform vec3 camPos;
uniform float exposure;

const float PI = 3.14159265359;

// ----------------------------------------------------------------------------
// Easy trick to get tangent-normals to world-space to keep PBR code simplified.
// Don't worry if you don't get what's going on; you generally want to do normal 
// mapping the usual way for performance anways; I do plan make a note of this 
// technique somewhere later in the normal mapping tutorial.
//vec3 getNormalFromMap()
//{
//	vec3 Q1 = dFdx(ps_in.FragPos);
//	vec3 Q2 = dFdy(ps_in.FragPos);
//	vec2 st1 = dFdx(ps_in.TexCoords);
//	vec2 st2 = dFdy(ps_in.TexCoords);
//
//	vec3 N = normalize(ps_in.Normal);
//	vec3 T = normalize(Q1*st2.t - Q2*st1.t);
//	Vec3 B = -normalize(cross(N, T));
//	mat3 TBN = mat3(T, B, N);
//
//	return normalize(TBN * tangentNormal);
//}

vec3 getNormalFromMap()
{
	vec3 tangentNormal = texture(normalMap, ps_in.TexCoords).xyz * 2.0 - 1.0;

	vec3 Q1 = dFdx(ps_in.FragPos);
	vec3 Q2 = dFdy(ps_in.FragPos);
	vec2 st1 = dFdx(ps_in.TexCoords);
	vec2 st2 = dFdy(ps_in.TexCoords);

	vec3 N = normalize(ps_in.Normal);
	vec3 T = normalize(Q1*st2.t - Q2*st1.t);
	vec3 B = -normalize(cross(N, T));
	mat3 TBN = mat3(T, B, N);

	return normalize(TBN * tangentNormal);
}


// Trowbridge - Reitz GGX正态分布函数
// NDFGGXTR(n,h,α)=α2π((n⋅h)2(α2−1)+1)2
// hh表示用来与平面上微平面做比较用的中间向量，而aa表示表面粗糙度。
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness *roughness;
	//float a = roughness; 
	float a2 = a * a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;

}

// Schlick-GGX： sclick几何函数和GGX函数的合体函数，
float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r * r) / 8.0;

	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;

}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

// 史密斯法
//float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
//{
//	float NdotV = max(dot(N, V)), 0.0f);
//	float NdotL = max(dot(N, L)), 0.0f);
//	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
//	float ggx1 = GeometrySchlickGGX(NdotL, roughness);
//
//	return ggx1 * ggx2;
//}

// 菲涅尔方程
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}


void main()
{
	
	vec3 albedo = pow(texture(albedoMap, ps_in.TexCoords).rgb, vec3(2.2));
	float metallic = texture(metallicMap, ps_in.TexCoords).r;
	float roughness = texture(roughnessMap, ps_in.TexCoords).r;
	float ao = texture(aoMap, ps_in.TexCoords).r;

	vec3  N = getNormalFromMap();
	vec3 V = normalize(camPos - ps_in.FragPos);

	// calculate reflectance at normal incidence; if dia-electric(like  plastic) 
	// use F0 of 0.04 and if it's a metal, use their albedo color as F0(metallic
	// workflow)
	// 计算反射
	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);

	// reflectance equation 反射率方程
	vec3 Lo = vec3(0.0);
	for (int i = 0; i < 4; ++i)
	{
		// calculate per-light radiance
		vec3 L = normalize(lightPositions[i] - ps_in.FragPos);
		vec3 H = normalize(V + L);// 半法线
		float distance = length(lightPositions[i] - ps_in.FragPos);
		float attenuation = 1.0 / (distance * distance);// 衰减
		vec3 radiance = lightColors[i] * attenuation; // 辐射率

		// Cook-Torrance BRDF 
		float NDF = DistributionGGX(N, H, roughness);
		float G = GeometrySmith(N, V, L, roughness);
		vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

		vec3 nominator = NDF * G * F; // 分子 
									  //  0.001 to prevent divide by zero.
		float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;// 分母
		vec3 specular = nominator / denominator;

		// kS is equal to Fresnel 
		vec3 kS = F;
		// for energy conservation, the diffuse and specular light can't
		// be above 1.0(unless the surface emits light); to preserve this
		// relationship the diffuse component(kD) should equal 1.0 - kS.
		vec3 kD = vec3(1.0) - kS;
		// multiply kD by the inverse metalness such that only non-metals
		// have diffuse lighting, or a linear blend if partly metal(pure metals
		// have no diffuse light).
		kD *= 1.0 - metallic;

		// scale light by NdotL
		float NdotL = max(dot(N, L), 0.0);

		// add to outgoing radiance Lo;
		// note that we already multiplied the BRDF by the Fresnel 
		// (kS) so we won't multiply by kS again
		Lo += (kD * albedo / PI + specular) * radiance * NdotL;

	}

	// ambient lighting (note that the next IBL tutorial will replace
	// this ambient lighting with environment lighting
	vec3 ambient = vec3(0.03) * albedo * ao;

	vec3 color = ambient + Lo;

	// HDR tonemapping 
	color = color / (color + vec3(1.0));
	// gamma correct
	color = pow(color, vec3(1.0 / 2.2));

	FragColor = vec4(color, 1.0);

	// test normal
	// FragColor = vec4(ps_in.Normal, 1.0);
	//FragColor = vec4(ps_in.FragPos,1.0);
}
