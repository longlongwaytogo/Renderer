//2.1.2 irradiance_convolution.ps 计算辐射度的卷积
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;

uniform samplerCube environmentMap;

const float PI = 3.14159265359f;

/*
卷积环境贴图有很多种方法，但是对于本教程，我们将为半球上的每个立方体贴图纹素生成固定数量的样本矢量 Ω,
Ω围绕样本方向定向并平均结果。固定量的样本矢量将均匀地分布在半球内部。注意，积分是连续函数，
并且在给定固定量的样本矢量的情况下离散地采样其函数将是近似值。我们使用的样本矢量越多，我们越接近积分。
*/
void main()
{		
	// NOTE(Joey): the world vector acts as the normal of a tangent surface
    // from the origin, aligned to WorldPos. Given this normal, calculate all
    // incoming radiance of the environment. The result of this radiance
    // is the radiance of light coming from -Normal direction, which is what
    // we use in the PBR shader to sample irradiance.
    vec3 N = normalize(WorldPos);

    vec3 irradiance = vec3(0.0);   
    
    // NOTE(Joey): tangent space calculation from origin point
    vec3 up    = vec3(0.0, 1.0, 0.0);
    vec3 right = cross(up, N);
    up            = cross(N, right);
       
    float sampleDelta = 0.025f; // sampleDelta delta 为固定的增量值来遍历半球
    float nrSamples = 0.0f; //
	/*
	在两个循环内，我们采用球面坐标将它们转换为3D笛卡尔样本矢量，将样本从切线转换为世界空间，
	并使用此样本矢量直接对HDR环境贴图进行采样。我们将每个样本结果添加到辐照度，
	最后我们除以采样的总数，得到平均采样辐照度
	*/ 
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

            irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    irradiance = PI * irradiance * (1.0 / float(nrSamples));
    
    FragColor = vec4(irradiance, 1.0);
}
